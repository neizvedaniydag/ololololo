from flask import Flask, render_template, request, redirect, url_for, flash, jsonify
from flask_login import LoginManager, login_user, logout_user, login_required, current_user
from flask_bcrypt import Bcrypt
from gigachat import GigaChat
from models import db, User, TestResult, PhysicalEducationResult, Schedule, Homework
import json
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º –∏–∑ JSON
def load_subjects_topics():
    json_path = os.path.join(os.path.dirname(__file__), 'data', 'subjects_topics.json')
    with open(json_path, 'r', encoding='utf-8') as f:
        return json.load(f)

SUBJECTS_TOPICS = load_subjects_topics()
app = Flask(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
app.config['SECRET_KEY'] = os.environ.get('FLASK_SECRET_KEY', 'a_default_secret_key_for_development')
app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL', 'sqlite:///instance/education_platform.db')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['GIGACHAT_CREDENTIALS'] = os.environ.get('GIGACHAT_CREDENTIALS')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
db.init_app(app)
bcrypt = Bcrypt(app)
login_manager = LoginManager(app)
login_manager.login_view = 'login'

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# –°–æ–∑–¥–∞–Ω–∏–µ –ë–î
with app.app_context():
    db.create_all()




@app.route('/api/subjects-topics')
def get_subjects_topics():
    return jsonify(SUBJECTS_TOPICS)


# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
@app.route('/register', methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        return redirect(url_for('dashboard'))

    if request.method == 'POST':
        username = request.form.get('username')
        email = request.form.get('email')
        password = request.form.get('password')

        if User.query.filter_by(email=email).first():
            flash('Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è', 'error')
            return redirect(url_for('register'))

        hashed_password = bcrypt.generate_password_hash(password).decode('utf-8')
        user = User(username=username, email=email, password=hashed_password)
        db.session.add(user)
        db.session.commit()

        flash('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞', 'success')
        return redirect(url_for('login'))

    return render_template('register.html')

# –í–•–û–î
@app.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('dashboard'))

    if request.method == 'POST':
        email = request.form.get('email')
        password = request.form.get('password')
        user = User.query.filter_by(email=email).first()

        if user and bcrypt.check_password_hash(user.password, password):
            login_user(user)
            return redirect(url_for('dashboard'))
        else:
            flash('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å', 'error')

    return render_template('login.html')

# –í–´–•–û–î
@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

# –ì–õ–ê–í–ù–ê–Ø
@app.route('/')
@login_required
def dashboard():
    tests = TestResult.query.filter_by(user_id=current_user.id).order_by(TestResult.created_at.desc()).limit(10).all()
    pe_results = PhysicalEducationResult.query.filter_by(user_id=current_user.id).order_by(PhysicalEducationResult.created_at.desc()).limit(10).all()
    return render_template('dashboard.html', tests=tests, pe_results=pe_results)

# –ì–ï–ù–ï–†–ê–¢–û–† –¢–ï–°–¢–û–í - –°–¢–†–ê–ù–ò–¶–ê
@app.route('/tests')
@login_required
def tests():
    user_tests = TestResult.query.filter_by(user_id=current_user.id).order_by(TestResult.created_at.desc()).all()
    return render_template('tests.html', tests=user_tests)

# API –ì–ï–ù–ï–†–ê–¶–ò–ò –¢–ï–°–¢–ê
@app.route('/api/generate-test', methods=['POST'])
@login_required
def api_generate_test():
    data = request.json
    subject = data.get('subject')
    topic = data.get('topic')
    custom_text = data.get('custom_text', '')
    num_questions = data.get('num_questions', 10)

    try:
        with GigaChat(
            credentials=app.config['GIGACHAT_CREDENTIALS'],
            verify_ssl_certs=False,
            scope="GIGACHAT_API_PERS",
            temperature=0.3
        ) as giga:

            # –ï–î–ò–ù–´–ô –ü–†–û–ú–ü–¢ —Å —á–µ—Ç–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
            if custom_text:
                prompt = f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Ç–µ—Å—Ç–æ–≤. –°–æ–∑–¥–∞–π —Ç–µ—Å—Ç –∏–∑ {num_questions} –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É:

{custom_text}

–í–ê–ñ–ù–û:
- correct - —ç—Ç–æ –ò–ù–î–ï–ö–° –æ—Ç 0 –¥–æ 3
- 0 = –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, 1 = –≤—Ç–æ—Ä–æ–π, 2 = —Ç—Ä–µ—Ç–∏–π, 3 = —á–µ—Ç–≤–µ—Ä—Ç—ã–π
- –í explanation –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º —É–∫–∞–∂–∏ –∫–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

–ü–†–ò–ú–ï–† –ü–†–ê–í–ò–õ–¨–ù–û–ì–û JSON:
{{
  "questions": [
    {{
      "question": "–ö–∞–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –±–ª–∏–∂–∞–π—à–∞—è –∫ –°–æ–ª–Ω—Ü—É?",
      "options": ["–ú–µ—Ä–∫—É—Ä–∏–π", "–í–µ–Ω–µ—Ä–∞", "–ó–µ–º–ª—è", "–ú–∞—Ä—Å"],
      "correct": 0,
      "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –ú–µ—Ä–∫—É—Ä–∏–π (–ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç). –ú–µ—Ä–∫—É—Ä–∏–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ –°–æ–ª–Ω—Ü—É –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 58 –º–ª–Ω –∫–º. –í–µ–Ω–µ—Ä–∞ - –≤—Ç–æ—Ä–∞—è –ø–ª–∞–Ω–µ—Ç–∞. –ó–µ–º–ª—è - —Ç—Ä–µ—Ç—å—è. –ú–∞—Ä—Å - —á–µ—Ç–≤–µ—Ä—Ç–∞—è."
    }}
  ]
}}

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π:"""
            else:
                prompt = f"""–°–æ–∑–¥–∞–π —Ç–µ—Å—Ç: –ø—Ä–µ–¥–º–µ—Ç "{subject}", —Ç–µ–º–∞ "{topic}", {num_questions} –≤–æ–ø—Ä–æ—Å–æ–≤.

–°–¢–†–û–ì–ò–ô –§–û–†–ú–ê–¢:
- correct = –∏–Ω–¥–µ–∫—Å 0-3 (0-–ø–µ—Ä–≤—ã–π, 1-–≤—Ç–æ—Ä–æ–π, 2-—Ç—Ä–µ—Ç–∏–π, 3-—á–µ—Ç–≤–µ—Ä—Ç—ã–π)
- –í explanation —Å–Ω–∞—á–∞–ª–∞ –ø–∏—à–∏ –ö–ê–ö–û–ô –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

–ü–†–ò–ú–ï–†:
{{
  "questions": [
    {{
      "question": "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2+2?",
      "options": ["3", "4", "5", "6"],
      "correct": 1,
      "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - 4 (–≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç). –≠—Ç–æ –±–∞–∑–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å–ª–æ–∂–µ–Ω–∏—è: 2+2=4. –í–∞—Ä–∏–∞–Ω—Ç 3 –Ω–µ–≤–µ—Ä–µ–Ω, —Ç–∞–∫ –∫–∞–∫ 2+1=3. –í–∞—Ä–∏–∞–Ω—Ç 5 –Ω–µ–≤–µ—Ä–µ–Ω, —Ç–∞–∫ –∫–∞–∫ 2+3=5. –í–∞—Ä–∏–∞–Ω—Ç 6 –Ω–µ–≤–µ—Ä–µ–Ω, —Ç–∞–∫ –∫–∞–∫ 2+4=6."
    }}
  ]
}}

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON:"""

            response = giga.chat(prompt)
            content = response.choices[0].message.content.strip()

            print("=" * 80)
            print("GIGACHAT –û–¢–í–ï–¢:")
            print(content[:800])
            print("=" * 80)

            # –û—á–∏—Å—Ç–∫–∞
            content = content.replace('``````', '').strip()

            json_start = content.find('{')
            json_end = content.rfind('}') + 1

            if json_start == -1 or json_end <= json_start:
                return jsonify({'success': False, 'error': '–ù–µ—Ç JSON –≤ –æ—Ç–≤–µ—Ç–µ'}), 500

            json_str = content[json_start:json_end]

            try:
                test_data = json.loads(json_str)
            except json.JSONDecodeError as je:
                print(f"‚ùå JSON error: {je}")
                print(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–π JSON: {json_str[:200]}")
                return jsonify({'success': False, 'error': f'–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON'}), 500

            if 'questions' not in test_data or not test_data['questions']:
                return jsonify({'success': False, 'error': '–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤'}), 500

            # –í–ê–õ–ò–î–ê–¶–ò–Ø + –ê–í–¢–û–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
            valid_questions = []
            for i, q in enumerate(test_data['questions'], 1):
                if not all(k in q for k in ['question', 'options', 'correct', 'explanation']):
                    print(f"‚ö†Ô∏è –í–æ–ø—Ä–æ—Å {i}: –ø—Ä–æ–ø—É—â–µ–Ω—ã –ø–æ–ª—è")
                    continue

                if len(q['options']) != 4:
                    print(f"‚ö†Ô∏è –í–æ–ø—Ä–æ—Å {i}: –Ω–µ 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞")
                    continue

                correct_idx = q['correct']

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–∞
                if not isinstance(correct_idx, int) or not (0 <= correct_idx <= 3):
                    print(f"‚ö†Ô∏è –í–æ–ø—Ä–æ—Å {i}: bad correct={correct_idx}, fix to 0")
                    q['correct'] = 0
                    correct_idx = 0

                # –£–ú–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∏—â–µ–º –≤ explanation —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                expl = q['explanation'].lower()
                correct_option = q['options'][correct_idx].lower()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ explanation
                if correct_option not in expl[:300]:
                    # –ò—â–µ–º –∫–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                    for idx, opt in enumerate(q['options']):
                        if opt.lower() in expl[:200] and '–ø—Ä–∞–≤–∏–ª—å–Ω' in expl[:200]:
                            print(f"üîß –í–æ–ø—Ä–æ—Å {i}: FIX correct {correct_idx}‚Üí{idx} (–ø–æ explanation)")
                            q['correct'] = idx
                            break

                # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ explanation
                if len(q['explanation']) < 30:
                    q['explanation'] = f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {q['options'][q['correct']]}."

                valid_questions.append(q)

            if len(valid_questions) < 3:
                return jsonify({'success': False, 'error': f'–ú–∞–ª–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(valid_questions)}'}), 500

            test_data['questions'] = valid_questions[:num_questions]

            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(test_data['questions'])} –≤–æ–ø—Ä–æ—Å–æ–≤")

            new_test = TestResult(
                user_id=current_user.id,
                subject=subject if not custom_text else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª",
                topic=topic if not custom_text else "–¢–µ—Å—Ç –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞",
                test_content=json.dumps(test_data, ensure_ascii=False)
            )
            db.session.add(new_test)
            db.session.commit()

            return jsonify({
                'success': True,
                'test_id': new_test.id,
                'questions_count': len(test_data['questions'])
            })

    except Exception as e:
        print(f"‚ùå ERROR: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({'success': False, 'error': str(e)}), 500


# –ü–†–û–•–û–ñ–î–ï–ù–ò–ï –¢–ï–°–¢–ê
@app.route('/test/<int:test_id>')
@login_required
def take_test(test_id):
    test = TestResult.query.get_or_404(test_id)
    if test.user_id != current_user.id:
        return redirect(url_for('dashboard'))

    test_data = json.loads(test.test_content)
    return render_template('take_test.html', test=test, test_data=test_data)

# –ü–†–û–í–ï–†–ö–ê –¢–ï–°–¢–ê
@app.route('/test/<int:test_id>/check', methods=['POST'])
@login_required
def check_test(test_id):
    test = TestResult.query.get_or_404(test_id)
    if test.user_id != current_user.id:
        return jsonify({'error': 'Access denied'}), 403

    test_data = json.loads(test.test_content)
    user_answers = request.json.get('answers', {})

    correct_count = 0
    total = len(test_data['questions'])

    for i, question in enumerate(test_data['questions']):
        user_answer = user_answers.get(str(i))
        if user_answer is not None and int(user_answer) == question['correct']:
            correct_count += 1

    score = round((correct_count / total) * 100) if total > 0 else 0

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
    test.score = score
    db.session.commit()

    return jsonify({
        'score': score,
        'correct': correct_count,
        'total': total
    })

# –£–î–ê–õ–ï–ù–ò–ï –¢–ï–°–¢–ê
@app.route('/api/test/<int:test_id>', methods=['DELETE'])
@login_required
def delete_test(test_id):
    test = TestResult.query.filter_by(id=test_id, user_id=current_user.id).first()
    if not test:
        return jsonify({'success': False, 'error': 'Test not found'}), 404

    db.session.delete(test)
    db.session.commit()

    return jsonify({'success': True})

# –§–ò–ó–ö–£–õ–¨–¢–£–†–ê
@app.route('/physical-education')
@login_required
def physical_education():
    return render_template('physical_education.html')

# –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –§–ò–ó–ö–£–õ–¨–¢–£–†–´
@app.route('/api/save-pe-result', methods=['POST'])
@login_required
def save_pe_result():
    data = request.get_json()

    pe_result = PhysicalEducationResult(
        user_id=current_user.id,
        exercise_type=data.get('exercise_type'),
        repetitions=data.get('repetitions', 0),
        correct_count=data.get('correct_count', 0),
        incorrect_count=data.get('incorrect_count', 0),
        errors=json.dumps(data.get('errors', []), ensure_ascii=False),
        score=data.get('score', 0)
    )
    db.session.add(pe_result)
    db.session.commit()

    return jsonify({'status': 'success', 'id': pe_result.id})

# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º
@app.route('/api/topics/<subject>')
def get_topics(subject):
    topics = SUBJECTS_TOPICS.get(subject, [])
    return jsonify({'topics': topics})
