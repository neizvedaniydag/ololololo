#!/bin/bash
set -e

C_RESET='\033[0m'
C_RED='\033[0;31m'
C_GREEN='\033[0;32m'
C_BLUE='\033[0;34m'
C_YELLOW='\033[1;33m'

function echoc {
    echo -e "${2}${1}${C_RESET}"
}

function error_exit {
    echoc "–û–®–ò–ë–ö–ê: ${1}" $C_RED
    exit 1
}

clear
echoc "=================================================================" $C_BLUE
echoc " –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê (NGINX –í–°–ï–ì–î–ê –ó–ê–ü–£–©–ï–ù) " $C_YELLOW
echoc "=================================================================" $C_BLUE
echo

# ============ –®–ê–ì 0-9: –£–°–¢–ê–ù–û–í–ö–ê –ò –ù–ê–°–¢–†–û–ô–ö–ê ============
echoc "0-9. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã..." $C_BLUE
sudo apt update -qq
sudo apt install -y curl git dnsutils openssl ca-certificates 2>&1 | tail -2

if ! command -v docker &> /dev/null; then
    curl -fsSL https://get.docker.com -o get-docker.sh
    sudo sh get-docker.sh 2>&1 | tail -3
    rm get-docker.sh
    sudo systemctl start docker
    sudo systemctl enable docker
fi

DC="docker compose"
if ! docker compose version &> /dev/null 2>&1; then
    sudo mkdir -p /usr/local/lib/docker/cli-plugins/
    sudo curl -SL "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" \
        -o /usr/local/lib/docker/cli-plugins/docker-compose 2>&1 | tail -1
    sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
fi

sudo systemctl stop nginx apache2 2>/dev/null || true
sudo systemctl disable nginx apache2 2>/dev/null || true

if command -v ufw &> /dev/null && sudo ufw status | grep -q "active"; then
    sudo ufw allow 80/tcp 443/tcp 2>/dev/null || true
fi

$DC down --remove-orphans 2>/dev/null || true
docker system prune -f 2>/dev/null || true

if [ -f "docker-compose.yml" ]; then
    sed -i '/^version:/d' docker-compose.yml 2>/dev/null || true
    if ! grep -q "restart: always" docker-compose.yml; then
        sed -i '/  web:/a\    restart: always' docker-compose.yml
        sed -i '/  nginx:/a\    restart: always' docker-compose.yml
    fi
fi

echoc "   ‚úì –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞" $C_GREEN
echo

# ============ –®–ê–ì 10: –°–ë–û–† –î–ê–ù–ù–´–• ============
echoc "10. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö..." $C_BLUE
read -p "   –î–æ–º–µ–Ω: " DOMAIN
[ -z "$DOMAIN" ] && error_exit "–î–æ–º–µ–Ω –ø—É—Å—Ç–æ–π"
read -p "   Email: " EMAIL
[ -z "$EMAIL" ] && error_exit "Email –ø—É—Å—Ç–æ–π"
read -p "   API-–∫–ª—é—á GigaChat: " GIGACHAT_CREDENTIALS
[ -z "$GIGACHAT_CREDENTIALS" ] && error_exit "API-–∫–ª—é—á –ø—É—Å—Ç–æ–π"
echoc "   ‚úì –î–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã" $C_GREEN
echo

# ============ –®–ê–ì 11: –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ============
echoc "11. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..." $C_BLUE
SECRET_KEY=$(openssl rand -hex 32)
cat > .env <<EOL
FLASK_SECRET_KEY=${SECRET_KEY}
GIGACHAT_CREDENTIALS=${GIGACHAT_CREDENTIALS}
FLASK_APP=app.py
EOL
sed -i 's/[[:space:]]*$//' .env

mkdir -p nginx
cat > nginx/production.conf <<EOF
server {
    listen 80;
    server_name ${DOMAIN} www.${DOMAIN};

    location /static {
        alias /app/static;
        expires 7d;
    }
    
    location / {
        proxy_pass http://web:5000;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOF

if [ -f "education_platform/education_platform/app.py" ]; then
    sed -i "s|'sqlite:///instance/education_platform.db'|'sqlite:////app/instance/education_platform.db'|g" education_platform/education_platform/app.py
    sed -i "s|\"sqlite:///instance/education_platform.db\"|\"sqlite:////app/instance/education_platform.db\"|g" education_platform/education_platform/app.py
fi
echoc "   ‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞" $C_GREEN
echo

# ============ –®–ê–ì 12: –ó–ê–ü–£–°–ö (HTTP) ============
echoc "12. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..." $C_BLUE
$DC up -d --build --remove-orphans 2>&1 | grep -E "Started|Created" || true
sleep 5

if $DC ps | grep web | grep -q "Up" && $DC ps | grep nginx | grep -q "Up"; then
    echoc "   ‚úì –°–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: http://${DOMAIN}" $C_GREEN
else
    echoc "   ‚ö† –ü—Ä–æ–±–ª–µ–º–∞ –∑–∞–ø—É—Å–∫–∞!" $C_RED
    $DC ps
    error_exit "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å"
fi
echo

# ============ –®–ê–ì 13: SSL (–° –ì–ê–†–ê–ù–¢–ò–ï–ô –í–û–ó–í–†–ê–¢–ê NGINX) ============
echoc "13. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å SSL..." $C_BLUE
echoc "   ‚Üí –û—Å—Ç–∞–Ω–æ–≤–∫–∞ nginx..." $C_YELLOW
$DC stop nginx

SSL_SUCCESS=false

# –í–ê–ñ–ù–û: –ó–∞–ø—É—Å–∫–∞–µ–º certbot —Å timeout –∏ –≤ —Ñ–æ–Ω–µ
echoc "   ‚Üí –ó–∞–ø—Ä–æ—Å SSL (–º–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥)..." $C_YELLOW
timeout 60 $DC run --rm -p 80:80 --entrypoint "\
  certbot certonly --standalone \
    --email $EMAIL \
    -d $DOMAIN \
    -d www.$DOMAIN \
    --agree-tos \
    --non-interactive \
    --force-renewal" certbot > /tmp/certbot.log 2>&1 && SSL_OUTPUT=$(cat /tmp/certbot.log) || SSL_OUTPUT=$(cat /tmp/certbot.log)

# –ì–ê–†–ê–ù–¢–ò–Ø: –£–±–∏–≤–∞–µ–º certbot –µ—Å–ª–∏ –æ–Ω –µ—â–µ –∂–∏–≤
docker kill $(docker ps -q --filter "ancestor=certbot/certbot") 2>/dev/null || true

# –ì–ê–†–ê–ù–¢–ò–Ø: –í–°–ï–ì–î–ê –∑–∞–ø—É—Å–∫–∞–µ–º nginx –æ–±—Ä–∞—Ç–Ω–æ
echoc "   ‚Üí –ó–ê–ü–£–°–ö NGINX (–≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ)..." $C_YELLOW
$DC start nginx
sleep 3

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL
if echo "$SSL_OUTPUT" | grep -q "Successfully received certificate"; then
    echoc "   ‚úì SSL –ø–æ–ª—É—á–µ–Ω!" $C_GREEN
    
    if docker run --rm -v ololololo_certbot_certs:/certs alpine ls /certs/live/${DOMAIN}/fullchain.pem 2>/dev/null; then
        cat > nginx/production.conf <<EOF
server {
    listen 80;
    server_name ${DOMAIN} www.${DOMAIN};
    return 301 https://\$host\$request_uri;
}

server {
    listen 443 ssl http2;
    server_name ${DOMAIN} www.${DOMAIN};
    ssl_certificate /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    location /static {
        alias /app/static;
        expires 7d;
    }
    location / {
        proxy_pass http://web:5000;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOF
        $DC restart nginx
        SSL_SUCCESS=true
    fi
elif echo "$SSL_OUTPUT" | grep -q "too many certificates"; then
    echoc "   ‚ö† –õ–∏–º–∏—Ç Let's Encrypt (5/–Ω–µ–¥–µ–ª—è)" $C_RED
    echoc "   ‚Üí –†–∞–±–æ—Ç–∞–µ–º –ø–æ HTTP" $C_YELLOW
else
    echoc "   ‚ö† SSL –Ω–µ –ø–æ–ª—É—á–µ–Ω" $C_YELLOW
fi

# –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê NGINX
if ! $DC ps | grep nginx | grep -q "Up"; then
    echoc "   ‚ö† Nginx —É–ø–∞–ª! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º..." $C_RED
    $DC restart nginx
    sleep 2
fi
echo

# ============ –®–ê–ì 14: –ü–†–û–í–ï–†–ö–ê ============
echoc "14. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞..." $C_BLUE
$DC ps
echo

KEY_CHECK=$($DC exec web sh -c 'echo $GIGACHAT_CREDENTIALS' 2>/dev/null | head -c 20)
[ ! -z "$KEY_CHECK" ] && echoc "   ‚úì API –∫–ª—é—á OK" $C_GREEN
echo

# ============ –®–ê–ì 15: CRON ============
echoc "15. –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫..." $C_BLUE
CRON1="*/5 * * * * cd $(pwd) && docker compose ps | grep -q 'Up' || docker compose up -d >> /var/log/docker-check.log 2>&1"
(crontab -l 2>/dev/null | grep -v "docker-check"; echo "$CRON1") | crontab -
echoc "   ‚úì –ù–∞—Å—Ç—Ä–æ–µ–Ω" $C_GREEN
echo

# ============ –ó–ê–í–ï–†–®–ï–ù–ò–ï ============
echoc "=================================================================" $C_BLUE
echoc " ‚úì‚úì‚úì –°–ê–ô–¢ –†–ê–ë–û–¢–ê–ï–¢! ‚úì‚úì‚úì " $C_GREEN
echoc "=================================================================" $C_BLUE
echo

if [ "$SSL_SUCCESS" = true ]; then
    echoc "üåê –°–∞–π—Ç: https://${DOMAIN}" $C_GREEN
else
    echoc "üåê –°–∞–π—Ç: http://${DOMAIN}" $C_YELLOW
    echoc "üí° –î–ª—è HTTPS: Cloudflare –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ 24—á" $C_RESET
fi

echoc "üîÑ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫: –í–ö–õ" $C_GREEN
echo
