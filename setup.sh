#!/bin/bash
set -e

C_RESET='\033[0m'
C_RED='\033[0;31m'
C_GREEN='\033[0;32m'
C_BLUE='\033[0;34m'
C_YELLOW='\033[1;33m'

function echoc {
    echo -e "${2}${1}${C_RESET}"
}

function error_exit {
    echoc "–û–®–ò–ë–ö–ê: ${1}" $C_RED
    exit 1
}

clear
echoc "=================================================================" $C_BLUE
echoc " –ê–í–¢–û–£–°–¢–ê–ù–û–í–ö–ê –° –ù–£–õ–ï–í–û–ô UBUNTU (PRODUCTION READY) " $C_YELLOW
echoc "=================================================================" $C_BLUE
echo

# ============ –®–ê–ì 0: –£–°–¢–ê–ù–û–í–ö–ê –ë–ê–ó–û–í–´–• –£–¢–ò–õ–ò–¢ ============
echoc "0. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö —É—Ç–∏–ª–∏—Ç..." $C_BLUE
sudo apt update -qq
sudo apt install -y curl git dnsutils openssl ca-certificates gnupg lsb-release 2>&1 | tail -3
echoc "   ‚úì curl, git, dig, openssl —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã" $C_GREEN
echo

# ============ –®–ê–ì 1: –£–°–¢–ê–ù–û–í–ö–ê DOCKER ============
echoc "1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..." $C_BLUE

if ! command -v docker &> /dev/null; then
    echoc "   ‚Üí Docker –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..." $C_YELLOW
    
    # –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    sudo apt-get remove -y docker docker-engine docker.io containerd runc 2>/dev/null || true
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
    curl -fsSL https://get.docker.com -o get-docker.sh
    sudo sh get-docker.sh 2>&1 | tail -5
    rm get-docker.sh
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å Docker
    sudo systemctl start docker
    sudo systemctl enable docker
    
    echoc "   ‚úì Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" $C_GREEN
else
    echoc "   ‚úì Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" $C_GREEN
fi
echo

# ============ –®–ê–ì 2: DOCKER COMPOSE V2 ============
echoc "2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose v2..." $C_BLUE

DC=""
if docker compose version &> /dev/null 2>&1; then
    DC="docker compose"
    echoc "   ‚úì Docker Compose v2 –Ω–∞–π–¥–µ–Ω" $C_GREEN
else
    echoc "   ‚Üí –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose v2..." $C_YELLOW
    sudo mkdir -p /usr/local/lib/docker/cli-plugins/
    sudo curl -SL "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" \
        -o /usr/local/lib/docker/cli-plugins/docker-compose 2>&1 | tail -1
    sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
    DC="docker compose"
    echoc "   ‚úì Docker Compose v2 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" $C_GREEN
fi
echo

# ============ –®–ê–ì 3: –û–°–í–û–ë–û–ñ–î–ï–ù–ò–ï –ü–û–†–¢–û–í ============
echoc "3. –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ 80 –∏ 443..." $C_BLUE
sudo systemctl stop nginx 2>/dev/null || true
sudo systemctl stop apache2 2>/dev/null || true
sudo systemctl disable nginx 2>/dev/null || true
sudo systemctl disable apache2 2>/dev/null || true
echoc "   ‚úì –ü–æ—Ä—Ç—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã" $C_GREEN
echo

# ============ –®–ê–ì 4: –§–ê–ô–†–í–û–õ ============
echoc "4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞..." $C_BLUE
if command -v ufw &> /dev/null; then
    UFW_STATUS=$(sudo ufw status 2>/dev/null | grep -i "Status: active" || echo "inactive")
    if [[ "$UFW_STATUS" == *"active"* ]]; then
        sudo ufw allow 80/tcp 2>/dev/null || true
        sudo ufw allow 443/tcp 2>/dev/null || true
        echoc "   ‚úì –ü–æ—Ä—Ç—ã 80 –∏ 443 –æ—Ç–∫—Ä—ã—Ç—ã –≤ UFW" $C_GREEN
    else
        echoc "   ‚úì UFW –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω" $C_YELLOW
    fi
else
    echoc "   ‚úì UFW –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" $C_YELLOW
fi
echo

# ============ –®–ê–ì 5: –û–ß–ò–°–¢–ö–ê DOCKER ============
echoc "5. –û—á–∏—Å—Ç–∫–∞ Docker (–ë–î —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è)..." $C_BLUE
$DC down --remove-orphans 2>/dev/null || true
docker system prune -f 2>/dev/null || true
echoc "   ‚úì Docker –æ—á–∏—â–µ–Ω" $C_GREEN
echo

# ============ –®–ê–ì 6: –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï DOCKER-COMPOSE.YML ============
echoc "6. –ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose.yml..." $C_BLUE

if [ -f "docker-compose.yml" ]; then
    sed -i '/^version:/d' docker-compose.yml 2>/dev/null || true
    
    if ! grep -q "restart: always" docker-compose.yml; then
        echoc "   ‚Üí –î–æ–±–∞–≤–ª—è—é restart: always..." $C_YELLOW
        sed -i '/web:/a\    restart: always' docker-compose.yml
        sed -i '/nginx:/a\    restart: always' docker-compose.yml
        echoc "   ‚úì –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ 24/7 –Ω–∞—Å—Ç—Ä–æ–µ–Ω" $C_GREEN
    else
        echoc "   ‚úì –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω" $C_GREEN
    fi
else
    echoc "   ‚ö† docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω" $C_YELLOW
fi
echo

# ============ –®–ê–ì 7: –°–ë–û–† –î–ê–ù–ù–´–• ============
echoc "7. –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏..." $C_BLUE
read -p "   –î–æ–º–µ–Ω: " DOMAIN
[ -z "$DOMAIN" ] && error_exit "–î–æ–º–µ–Ω –ø—É—Å—Ç–æ–π"

read -p "   Email: " EMAIL
[ -z "$EMAIL" ] && error_exit "Email –ø—É—Å—Ç–æ–π"

read -p "   API-–∫–ª—é—á GigaChat: " GIGACHAT_CREDENTIALS
[ -z "$GIGACHAT_CREDENTIALS" ] && error_exit "API-–∫–ª—é—á –ø—É—Å—Ç–æ–π"

KEY_LEN=${#GIGACHAT_CREDENTIALS}
if [ $KEY_LEN -lt 50 ]; then
    echoc "   ‚ö† –ö–æ—Ä–æ—Ç–∫–∏–π –∫–ª—é—á ($KEY_LEN —Å–∏–º–≤–æ–ª–æ–≤)" $C_YELLOW
else
    echoc "   ‚úì –ö–ª—é—á –ø–æ–ª—É—á–µ–Ω ($KEY_LEN —Å–∏–º–≤–æ–ª–æ–≤)" $C_GREEN
fi
echo

# ============ –®–ê–ì 8: –°–û–ó–î–ê–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ============
echoc "8. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..." $C_BLUE

SECRET_KEY=$(openssl rand -hex 32)
cat > .env <<EOL
FLASK_SECRET_KEY=${SECRET_KEY}
GIGACHAT_CREDENTIALS=${GIGACHAT_CREDENTIALS}
FLASK_APP=app.py
EOL

sed -i 's/[[:space:]]*$//' .env
echoc "   ‚úì .env —Å–æ–∑–¥–∞–Ω" $C_GREEN

mkdir -p nginx
cat > nginx/nginx.conf.template <<'NGINXEOF'
server {
    listen 80;
    server_name %%DOMAIN%% www.%%DOMAIN%%;
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl http2;
    server_name %%DOMAIN%% www.%%DOMAIN%%;
    ssl_certificate /etc/letsencrypt/live/%%DOMAIN%%/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/%%DOMAIN%%/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers off;

    location /static {
        alias /app/static;
        expires 7d;
    }
    location / {
        proxy_pass http://web:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 300;
    }
}
NGINXEOF

sed "s/%%DOMAIN%%/${DOMAIN}/g" nginx/nginx.conf.template > nginx/production.conf

if [ -f "education_platform/education_platform/app.py" ]; then
    sed -i "s|'sqlite:///instance/education_platform.db'|'sqlite:////app/instance/education_platform.db'|g" education_platform/education_platform/app.py
    sed -i "s|\"sqlite:///instance/education_platform.db\"|\"sqlite:////app/instance/education_platform.db\"|g" education_platform/education_platform/app.py
    echoc "   ‚úì –ü—É—Ç—å –∫ –ë–î –∏—Å–ø—Ä–∞–≤–ª–µ–Ω" $C_GREEN
fi

echoc "   ‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞" $C_GREEN
echo

# ============ –®–ê–ì 9: –ü–†–û–í–ï–†–ö–ê DNS ============
echoc "9. –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS..." $C_BLUE
PUBLIC_IP=$(curl -s http://ipinfo.io/ip || echo "unknown")
DOMAIN_IP=$(dig +short $DOMAIN @8.8.8.8 | head -n1 || echo "unknown")
echoc "   IP —Å–µ—Ä–≤–µ—Ä–∞: ${PUBLIC_IP}" $C_YELLOW
echoc "   IP –¥–æ–º–µ–Ω–∞: ${DOMAIN_IP}" $C_YELLOW

if [ "$PUBLIC_IP" != "$DOMAIN_IP" ]; then
    echoc "   ‚ö† IP –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!" $C_RED
    read -p "   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N) " dec
    [ "$dec" != "y" ] && [ "$dec" != "Y" ] && error_exit "–ü—Ä–µ—Ä–≤–∞–Ω–æ"
else
    echoc "   ‚úì DNS –û–ö" $C_GREEN
fi
echo

# ============ –®–ê–ì 10: SSL ============
echoc "10. –ü–æ–ª—É—á–µ–Ω–∏–µ SSL..." $C_BLUE
docker volume rm ololololo_certbot_certs 2>/dev/null || true

$DC run --rm -p 80:80 --entrypoint "\
  certbot certonly --standalone \
    --email $EMAIL \
    -d $DOMAIN \
    -d www.$DOMAIN \
    --rsa-key-size 4096 \
    --agree-tos \
    --non-interactive \
    --force-renewal" certbot 2>&1 | grep -E "Success|Certificate" || true

echoc "   ‚úì SSL –ø–æ–ª—É—á–µ–Ω" $C_GREEN
echo

# ============ –®–ê–ì 11: –ó–ê–ü–£–°–ö ============
echoc "11. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..." $C_BLUE
$DC up -d --build --remove-orphans 2>&1 | tail -5
sleep 5
echoc "   ‚úì –ó–∞–ø—É—â–µ–Ω–æ" $C_GREEN
echo

# ============ –®–ê–ì 12: –ü–†–û–í–ï–†–ö–ê ============
echoc "12. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞..." $C_BLUE
$DC ps
echo

KEY_CHECK=$($DC exec web sh -c 'echo $GIGACHAT_CREDENTIALS' 2>/dev/null | tr -d '\r\n' | head -c 20)
[ ! -z "$KEY_CHECK" ] && echoc "   ‚úì API –∫–ª—é—á –û–ö: ${KEY_CHECK}..." $C_GREEN || echoc "   ‚ö† API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω" $C_RED
echo

# ============ –®–ê–ì 13: –ê–í–¢–û–ú–û–ù–ò–¢–û–†–ò–ù–ì ============
echoc "13. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..." $C_BLUE
CRON1="*/5 * * * * docker compose -f $(pwd)/docker-compose.yml ps | grep -q 'Up' || docker compose -f $(pwd)/docker-compose.yml up -d >> /var/log/docker-autostart.log 2>&1"
CRON2="0 1,13 * * * cd $(pwd) && docker compose run --rm certbot renew && docker compose exec nginx nginx -s reload >> /var/log/ssl-renewal.log 2>&1"
(crontab -l 2>/dev/null | grep -v "docker-autostart" | grep -v "ssl-renewal"; echo "$CRON1"; echo "$CRON2") | crontab -
echoc "   ‚úì Cron –Ω–∞—Å—Ç—Ä–æ–µ–Ω" $C_GREEN
echo

echoc "=================================================================" $C_BLUE
echoc " ‚úì‚úì‚úì –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê! –°–ê–ô–¢ –†–ê–ë–û–¢–ê–ï–¢ 24/7! ‚úì‚úì‚úì " $C_GREEN
echoc "=================================================================" $C_BLUE
echo
echoc "üåê –°–∞–π—Ç: https://${DOMAIN}" $C_YELLOW
echoc "üîÑ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫: –í–ö–õ" $C_GREEN
echoc "üìä –ë–î: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è" $C_GREEN
echo
