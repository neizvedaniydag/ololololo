cat > setup.sh << 'SETUPEOF'
#!/bin/bash
set -e

C_RESET='\033[0m'
C_RED='\033[0;31m'
C_GREEN='\033[0;32m'
C_BLUE='\033[0;34m'
C_YELLOW='\033[1;33m'

function echoc {
    echo -e "${2}${1}${C_RESET}"
}

function error_exit {
    echoc "–û–®–ò–ë–ö–ê: ${1}" $C_RED
    exit 1
}

clear
echoc "=================================================================" $C_BLUE
echoc " –ü–û–õ–ù–ê–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê " $C_YELLOW
echoc "=================================================================" $C_BLUE
echo

echoc "1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose..." $C_BLUE
if ! command -v docker &> /dev/null; then
    error_exit "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

DC=""
if docker compose version &> /dev/null 2>&1; then
    DC="docker compose"
    echoc "   ‚úì Docker Compose v2 –Ω–∞–π–¥–µ–Ω" $C_GREEN
else
    echoc "   ‚Üí –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose v2..." $C_YELLOW
    sudo mkdir -p /usr/local/lib/docker/cli-plugins/
    sudo curl -SL "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" \
        -o /usr/local/lib/docker/cli-plugins/docker-compose 2>&1 | tail -1
    sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
    DC="docker compose"
    echoc "   ‚úì Docker Compose v2 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" $C_GREEN
fi
echo

echoc "2. –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤..." $C_BLUE
sudo systemctl stop nginx 2>/dev/null || true
sudo systemctl stop apache2 2>/dev/null || true
sudo systemctl disable nginx 2>/dev/null || true
sudo systemctl disable apache2 2>/dev/null || true
echoc "   ‚úì –ü–æ—Ä—Ç—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã" $C_GREEN
echo

echoc "3. –û—á–∏—Å—Ç–∫–∞ Docker (–ë–î —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è)..." $C_BLUE
# –í–ê–ñ–ù–û: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ë–ï–ó —É–¥–∞–ª–µ–Ω–∏—è volume —Å –ë–î
$DC down --remove-orphans 2>/dev/null || true
docker system prune -f 2>/dev/null || true
echoc "   ‚úì –°—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É–¥–∞–ª–µ–Ω—ã" $C_GREEN
echo

echoc "4. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ docker-compose.yml..." $C_BLUE
if [ -f "docker-compose.yml" ]; then
    sed -i '/^version:/d' docker-compose.yml
    echoc "   ‚úì –§–∞–π–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω" $C_GREEN
fi
echo

echoc "5. –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏..." $C_BLUE
read -p "   –î–æ–º–µ–Ω: " DOMAIN
[ -z "$DOMAIN" ] && error_exit "–î–æ–º–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"

read -p "   Email: " EMAIL
[ -z "$EMAIL" ] && error_exit "Email –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"

read -p "   API-–∫–ª—é—á GigaChat: " GIGACHAT_CREDENTIALS
[ -z "$GIGACHAT_CREDENTIALS" ] && error_exit "API-–∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"

echoc "   ‚úì –î–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã (–∫–ª—é—á: ${#GIGACHAT_CREDENTIALS} —Å–∏–º–≤–æ–ª–æ–≤)" $C_GREEN
echo

echoc "6. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..." $C_BLUE

SECRET_KEY=$(openssl rand -hex 32)
cat > .env <<EOL
FLASK_SECRET_KEY=${SECRET_KEY}
GIGACHAT_CREDENTIALS=${GIGACHAT_CREDENTIALS}
FLASK_APP=app.py
EOL

mkdir -p nginx
cat > nginx/nginx.conf.template <<'NGINXEOF'
server {
    listen 80;
    server_name %%DOMAIN%% www.%%DOMAIN%%;
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl http2;
    server_name %%DOMAIN%% www.%%DOMAIN%%;
    ssl_certificate /etc/letsencrypt/live/%%DOMAIN%%/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/%%DOMAIN%%/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers off;

    location /static {
        alias /app/static;
        expires 7d;
    }
    location / {
        proxy_pass http://web:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 300;
    }
}
NGINXEOF

sed "s/%%DOMAIN%%/${DOMAIN}/g" nginx/nginx.conf.template > nginx/production.conf

if [ -f "education_platform/education_platform/app.py" ]; then
    sed -i "s|'sqlite:///instance/education_platform.db'|'sqlite:////app/instance/education_platform.db'|g" education_platform/education_platform/app.py
    sed -i "s|\"sqlite:///instance/education_platform.db\"|\"sqlite:////app/instance/education_platform.db\"|g" education_platform/education_platform/app.py
    echoc "   ‚úì –ü—É—Ç—å –∫ –ë–î –∏—Å–ø—Ä–∞–≤–ª–µ–Ω" $C_GREEN
fi

echoc "   ‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞" $C_GREEN
echo

echoc "7. –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS..." $C_BLUE
PUBLIC_IP=$(curl -s http://ipinfo.io/ip || echo "unknown")
DOMAIN_IP=$(dig +short $DOMAIN @8.8.8.8 | head -n1 || echo "unknown")
echoc "   IP —Å–µ—Ä–≤–µ—Ä–∞: ${PUBLIC_IP}, –¥–æ–º–µ–Ω–∞: ${DOMAIN_IP}" $C_YELLOW

if [ "$PUBLIC_IP" != "$DOMAIN_IP" ]; then
    echoc "   ‚ö† IP –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!" $C_RED
    read -p "   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N) " decision
    if [ "$decision" != "Y" ] && [ "$decision" != "y" ]; then
        error_exit "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞"
    fi
fi
echo

echoc "8. –ü–æ–ª—É—á–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..." $C_BLUE

echoc "   ‚Üí –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..." $C_YELLOW
docker volume rm ololololo_certbot_certs 2>/dev/null || true

echoc "   ‚Üí –ü–æ–ª—É—á–µ–Ω–∏–µ SSL (standalone –º–µ—Ç–æ–¥)..." $C_YELLOW
$DC run --rm -p 80:80 --entrypoint "\
  certbot certonly --standalone \
    --email $EMAIL \
    -d $DOMAIN \
    -d www.$DOMAIN \
    --rsa-key-size 4096 \
    --agree-tos \
    --non-interactive \
    --force-renewal" certbot 2>&1 | grep -E "Success|Certificate|saved"

echoc "   ‚úì SSL –ø–æ–ª—É—á–µ–Ω!" $C_GREEN
echo

echoc "9. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..." $C_BLUE
$DC up -d --build --remove-orphans 2>&1 | tail -5
sleep 5
echoc "   ‚úì –ó–∞–ø—É—â–µ–Ω–æ" $C_GREEN
echo

echoc "10. –ü—Ä–æ–≤–µ—Ä–∫–∞..." $C_BLUE
$DC ps
echo

KEY_IN_CONTAINER=$($DC exec web sh -c 'echo $GIGACHAT_CREDENTIALS' 2>/dev/null | tr -d '\r\n' | head -c 20)
if [ ! -z "$KEY_IN_CONTAINER" ]; then
    echoc "   ‚úì API –∫–ª—é—á OK: ${KEY_IN_CONTAINER}..." $C_GREEN
fi
echo

echoc "=================================================================" $C_BLUE
echoc " ‚úì –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê! " $C_GREEN
echoc "=================================================================" $C_BLUE
echo
echoc "üåê –°–∞–π—Ç: https://${DOMAIN}" $C_YELLOW
echoc "üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏" $C_GREEN
echo
echoc "üìù –ö–æ–º–∞–Ω–¥—ã:" $C_BLUE
echoc "  –°—Ç–∞—Ç—É—Å:      $DC ps" $C_RESET
echoc "  –õ–æ–≥–∏:        $DC logs -f web" $C_RESET
echoc "  –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:  $DC restart web" $C_RESET
echoc "  –ë—ç–∫–∞–ø –ë–î:    docker cp education-platform-app:/app/instance/education_platform.db ./backup.db" $C_RESET
echo
echoc "‚öôÔ∏è  –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ SSL (crontab -e):" $C_YELLOW
echoc "0 1,13 * * * cd $(pwd) && $DC run --rm certbot renew && $DC exec nginx nginx -s reload" $C_GREEN
echo
SETUPEOF

chmod +x setup.sh
